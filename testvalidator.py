import openpyxl
import tkinter as tk
from tkinter import filedialog, messagebox, ttk
from PIL import Image, ImageTk
import time

# Список исключений
exclude_list = [2695,166021,152902,153228,107317,10200574,10089,12000950,165510,156156,159953,
                118032,149528,105273,163221,73942,160115,49502917,158448,2763,129034,10201395,
                49502998,162809,80415,150044,157970,92659,10201334,99446,49502936,160629,159651,
                154699,150923,152856,163300,160892,166006,158015,85596,10015250,160037,36673,
                152827,10202466,34238,160686,156402,14788,163696,60796,14239,104850,152269,157971,
                162336,10001726,152949,161585,152873,166316,114011,154590,164144,154471,83319,147600,
                162569,163649,90835,157139,107738,10006325,46005107,162643,65997,100177,49502931,52343,
                154978,18495,85714,162539,166257,159059,16212,6049,159723,49502852,153260,149839,147227,
                160214,166490,166730,129939,99014533,163824,160717,162273,161333,99034850,157177,157219,
                160748,129748,99032800,129605,163685,158615,166571,161389,10019533,166398,155311,152273,
                159651,161109,99034692,160794,162269,158248,146930,161340,152896,166135,159519,161161,
                160561,165916,164718,158408,157949,113900,161417,88178,159043,165900,160329,158215,165912,
                160771,161332,161744,106347,159787,10014513,109894,52948,119291,23751379,23753197,
                23753057,23751579,23753767,23751598,23753811,23753597,23752894,23753574,23753792,23753785,
                23751604,23753836,23752800,23752458,23753795,111307,54601,104189,163231,10011098,50015,
                98182,55774,99000320,22130,77988,82864,101674,119815,49502246,153403,19990,152714,161291,
                150791,66000029,70776,99290,45911,154115,65019,54626,17924,209,19814,77983,158027,40343,
                155094,12008171,152838,161231,9336,158994,12645,152474,151122,23753619,160559,63926,153120,
                120659,38001061,153897,52090589,92656,10202544,110278,147696,58957,54636,46005226,129550,
                80679,155062,99723,166170,18444,40781,157557,58531,156873,20008,158034,25905,153882,74887,
                49502331,161169,112241,97063,159560,22049,18373,59213,155323,34695,42000003,158640,38161,
                158059,92563,159133,86689,10044426,129256,49502914,119290,97716,154136,148520,9023461,63826,
                165024,157904,153443,149554,12002988,12003052,9023,105294,49502918,149297,106301,94179,49914,
                21220,109254,49502912,146556,79711,46004670,9002774,112502,148452,20768,153377,104625,59725,
                154105,157025,99031394,84172,39996,12003793,10008798,89497,15348,157933,99012002,618,21897,
                87856,51724,152843,151163,150996,10201804,150875,99623,20757,111991,23753337,150807,157891,
                154651,112133,71016,100237,11981168,52238,10004493,57577,10009811,99578,99626,12013253,28330,
                10028931,109549,17083,152581,49502888,155548,18451,10006777,18417,85748,55633,109714,153280,
                112408,130135,49502988,7462,2791,12288,21307,65816,23809,105190,63860,148952,105934,112132,44291,
                26607,83409,99600,40721,70484,10006569,105804,157867,67544,163898,119712,160486,114310,99793,105463,
                48300550,10002197,58624,160445,39000441,155657,104133,161575,11340075,87654,164049,95044,130733,
                112721,153534,149548,160630,163649,94141,159554,112181,10201114,60007,10425,17918,109266,49503183,
                58349,156746,158099,159496,49502548,22125,111130,53410,60780,160642,160733,159978,14119,120208,113601,
                147729,151256,114303,109802,129742,49502927,50625,158110,1642,51787,97300,49501104,5776,67081,57036,
                94043,166028,119888,164001,77786,73246,29422,148242,16007,12014444,155568,47988,35038,106348,100789,
                105352,147609,49502241,10200389,164514,49503050,155202,11346114,11980933,154788,157881,112237,11132001,
                10010935,165839,11980861,49500953,96067,10011477,49502273,11130496,11981013,118296,12013869,160160,12001471,
                53961186,155751,49503115,113582,160944,158839,66000063,157869,159885,147471,158361,53961047,100533,150131,
                49502919,157558,10009946,159219,165947,160129,96537,11130176,49501110,53961122,64211,90706,152406,109655,
                49502902,12010904,12009416,12007444,158593,10008973,158608,10005024,11450046,159788,12012006,109466,161611,
                94433,105788,159619,46003691,46005222,38620,11130915,154068,158039,17593,159826,154749,159324,10011796,161182,
                70770,10007620,60007,99815,130536,9023457,10201568,11980645,11981147,10200097,11980492,148846,12007408,20090846,
                12009945,12007393,10006352,157089,164548,157270,11170123,155767,39000351,10009310,157762,153747,150175,113582,
                82993,55768,151759,23751178,15254,164510,162336,160830,9023457,160030,112018,2602192,34328]  # Пример списка исключений (int значения)

def load_and_process_data():
    # Открытие диалога для выбора файла
    file_path = filedialog.askopenfilename(filetypes=[("Excel files", "*.xlsx")])
    if not file_path:
        return

    try:
        # Загрузка данных из Excel файла
        wb = openpyxl.load_workbook(file_path)
        sheet = wb.active

        # Определение столбцов с табельными номерами и ФИО
        header = [cell.value for cell in sheet[1]]
        try:
            tn_column_index = header.index('Табельный номер') + 1
            fio_column_index = header.index('ФИО') + 1
        except ValueError:
            messagebox.showerror("Ошибка", "Столбцы 'Табельный номер' или 'ФИО' не найдены")
            return

        # Сортировка данных и исключение строк с табельными номерами из exclude_list
        rows_to_delete = []
        empty_tn_cells = 0
        empty_tn_fios = []
        for row in sheet.iter_rows(min_row=2, max_row=sheet.max_row, values_only=True):
            if row[tn_column_index - 1] in exclude_list:
                rows_to_delete.append(row[0])
            if (row[tn_column_index - 1] is None or row[tn_column_index - 1] == '') and \
               (row[fio_column_index - 1] is not None and row[fio_column_index - 1] != ''):
                empty_tn_cells += 1
                empty_tn_fios.append(row[fio_column_index - 1])

        # Удаление строк с табельными номерами из exclude_list
        for row in reversed(list(sheet.iter_rows(min_row=2, max_row=sheet.max_row))):
            if row[tn_column_index - 1].value in exclude_list:
                sheet.delete_rows(row[0].row, 1)

        # Создание нового листа для фамилий с пустыми табельными номерами
        empty_tn_sheet = wb.create_sheet(title="Пустые табельные номера")
        empty_tn_sheet.append(["ФИО"])
        for fio in empty_tn_fios:
            empty_tn_sheet.append([fio])

        # Обновление прогресс-бара
        update_progress_bar()

        # Алерт о сохранении списка в исключении резидентов по допуску в кампус
        messagebox.showinfo("Сохранение", "Сейчас сохраняем список для отправки в отдел пропусков.")

        # Сохранение обработанных данных обратно в Excel файл
        save_path = filedialog.asksaveasfilename(defaultextension=".xlsx", filetypes=[("Excel files", "*.xlsx")])
        if save_path:
            wb.save(save_path)
            messagebox.showinfo("Успех", f"Файл успешно обработан и сохранен.\nКоличество совпадений: {len(rows_to_delete)}\nСписок гостей без пропуска: {empty_tn_cells}")

        # Алерт о сохранении файла с фамилиями, у которых нет пропуска
        messagebox.showinfo("Сохранение", "Сейчас сохраняем список для оформления разовых пропусков.")

        # Сохранение отдельного файла с фамилиями с пустыми табельными номерами
        save_empty_tn_path = filedialog.asksaveasfilename(defaultextension=".xlsx", filetypes=[("Excel files", "*.xlsx")])
        if save_empty_tn_path:
            empty_tn_wb = openpyxl.Workbook()
            empty_tn_ws = empty_tn_wb.active
            empty_tn_ws.title = "Пустые табельные номера"
            empty_tn_ws.append(["ФИО"])
            for fio in empty_tn_fios:
                empty_tn_ws.append([fio])
            empty_tn_wb.save(save_empty_tn_path)
            messagebox.showinfo("Успех", "Файл с фамилиями с пустыми табельными номерами успешно сохранен.")
    except Exception as e:
        messagebox.showerror("Ошибка", f"Произошла ошибка: {e}")

def update_progress_bar():
    for i in range(101):
        progress['value'] = i
        root.update_idletasks()
        time.sleep(0.02)  # 0.02 seconds * 100 = 2 seconds

# Создание главного окна
root = tk.Tk()
root.title("Обработка списка резидентов")
root.geometry("600x600")

# Преобразование PNG в ICO
icon_image = Image.open("icon.png")  # Убедитесь, что файл icon.png находится в той же директории
icon_image.save("icon.ico")

# Установка иконки окна
root.iconbitmap("icon.ico")

# Загрузка и установка фонового изображения
image = Image.open("background.jpg")  # Убедитесь, что файл background.jpg находится в той же директории
background_image = ImageTk.PhotoImage(image)
background_label = tk.Label(root, image=background_image)
background_label.place(x=0, y=0, relwidth=1, relheight=1)

# Создание кнопки для загрузки и обработки данных
load_button = tk.Button(root, text="Загрузить и обработать", command=load_and_process_data)
load_button.pack(pady=20)

# Создание прогресс-бара
progress = ttk.Progressbar(root, orient="horizontal", length=400, mode="determinate")
progress.pack(pady=20)

# Запуск главного цикла
root.mainloop()