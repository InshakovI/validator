import openpyxl
import tkinter as tk
from tkinter import filedialog, messagebox, ttk
from PIL import Image, ImageTk
import time

# Список исключений
exclude_list = [49502852,13376,111307,2695,166021,164514,157987,152902,12014575,20090187,49503050,169105,
161728,155202,153260,104189,163376,10000275,2600236,149839,163569,10011098,50015,147227,
153228,107317,154788,166854,23751379,157881,99000320,22130,23753197,77988,162247,82864,
10010370,119815,49502246,153403,19990,160214,49503017,166490,162084,10011990,152714,161291,
150791,66000029,12000485,166730,159710,10015403,129939,96446,45911,154115,23753057,10003582,
55743,10201020,169407,112237,74969,65019,99014533,163824,10010935,163330,17924,55368,160717,
12000789,11980861,158027,2600019,155094,12008171,152838,161231,162273,49500953,10007559,
96067,10011477,12000950,161333,156429,70066,12645,151124,10201683,152474,49502273,151122,
160559,159608,156156,159953,118032,46388,11981352,11130496,11981013,118296,63926,166379,
153120,12013869,10030035,164502,165393,160160,120659,153897,23751579,149528,168633,10202544,
149571,110278,105273,82352,12014654,12001471,147696,58957,54636,161344,46005226,160498,
46005290,53961186,9000458,73942,129550,160115,156139,80679,99034850,155062,23753767,99723,
166170,157177,155751,157053,10203138,166547,40781,49502557,157557,12001832,49502917,158034,
157219,166267,160748,129748,113582,160944,10203094,49502331,39000486,10042002,158448,112241,
97063,99032800,8002979,159560,2763,81624,129605,158839,159557,66000063,32000810,58642,163685,
42911,129034,49503222,59213,153922,12009977,155323,67209,18373,53053265,34695,158615,157869,
158640,38161,92563,49502997,78124,120728,104402,60822,147059,159133,86689,23751598,10201395,
65044,10004652,109966,10044426,129256,56467,80415,119290,159885,166571,97716,100287,95363,
161389,11981254,10019533,147471,163854,154136,158361,10202710,166574,53961047,148520,9023461,
157970,63826,10011411,165024,161346,153443,100533,160779,92659,149554,164779,150131,10201334,
12002988,49502919,10009801,166398,117787,155311,9023,99446,105294,49502936,157558,49502918,
160629,163850,160806,149297,152273,159651,10009946,165747,154699,49503207,153247,112018,106301,
94179,152856,163300,49503268,55000249,58274,21220,109254,164272,10000326,159219,65605,168626,
152831,165947,160129,160892,20601,166006,129628,82993,148452,96537,158015,16889,113156,11130176,
163216,12003531,49501110,10026230,85596,154092,20768,160962,53961122,10015250,10004955,59725,
145669,160037,157025,99031394,49502928,157043,39996,12003793,89497,161109,30395,64211,160794,
152827,90706,8001534,155710,12003921,25088,99561,23752894,99965646,11981477,10202466,62058,
96929,10200177,169042,158248,21897,49502902,34238,12004145,146930,12009416,87856,12007444,
12010313,23753574,10201832,46005326,12004329,160686,150875,111994,164105,156402,99623,166625,
14788,20757,23751178,165387,162617,8000008,23753960,158593,154651,41467,112133,71016,100237,
10203589,11981168,60796,153309,14239,12004593,161340,2602192,104850,162352,10009757,152896,
152958,10004493,57577,23753597,10009811,21085,164844,10008973,12013253,28330,158608,10028931,
10005024,109549,10203215,32000389,159519,158111,160913,17083,152269,152581,11450046,155548,
21927,159788,12012006,23753792,160561,18451,10006777,12005060,12005089,12005103,12005120,153280,
109461,49503441,160667,157971,165916,10202439,83464,7462,2791,23753785,12288,112351,161611,21307,
164718,29086,160116,158408,93993,105788,105190,159619,10011105,48086,157949,148952,105934,112132,
110337,169122,168093,10001726,44291,83409,46003677,38620,9363,156048,11190122,49503063,49502958,
101729,99600,40721,11130915,113900,152949,11330272,10006569,160830,87479,66000071,152665,67544,
163898,161585,119712,119332,158039,160486,114310,99793,152873,105463,73560,130729,10002197,58624,
159826,23751604,166316,160445,90000874,155657,154590,60690,104133,161417,163841,161575,164144,
11340075,154749,129383,87654,164049,154471,32617,83319,49503216,88178,166508,130733,160353,112721,
153534,159043,149548,162569,10009285,99552,23753836,99038573,163649,161182,165900,151097,159554,
99661,10202373,90835,112181,157139,10201114,66000080,70770,10007620,167287,60007,17918,67863,
8000667,12014510,160329,158215,167108,88856,160771,12010878,23752800,157041,165069,10006325,99815,
130536,46005107,158099,42590,159496,49502548,22125,161744,99622,1818,168032,111130,53410,9023457,
60780,106347,10030121,9000372,160733,11980645,11981147,159978,14119,10201013,113601,11980492,147729,
109802,23753906,49503265,162643,10005609,65997,9023451,156437,1642,10028357,12007408,23752458,164390,
49502931,159723,52343,153667,8000750,8000021,159787,97300,49501104,160030,67081,12007393,168185,168543,
18495,85714,94043,162539,60010,166028,66000062,164001,88915,106052,77786,73246,29422,164548,157270,
11170123,155767,23753795,12014444,12007761,45066,155568,35038,69838,166257,159059,12009631,109894,
152934,39321,106348,100789,157762,46001927,52948,13708,105352,162216,16212,49502241,161383,119291,
6049,153747,46005188]  # Пример списка исключений (int значения)

def load_and_process_data():
    # Открытие диалога для выбора файла
    file_path = filedialog.askopenfilename(filetypes=[("Excel files", "*.xlsx")])
    if not file_path:
        return

    try:
        # Загрузка данных из Excel файла
        wb = openpyxl.load_workbook(file_path)
        sheet = wb.active

        # Определение столбцов с табельными номерами и ФИО
        header = [cell.value for cell in sheet[1]]
        try:
            tn_column_index = header.index('Табельный номер') + 1
            fio_column_index = header.index('ФИО') + 1
        except ValueError:
            messagebox.showerror("Ошибка", "Столбцы 'Табельный номер' или 'ФИО' не найдены")
            return

        # Сортировка данных и исключение строк с табельными номерами из exclude_list
        rows_to_delete = []
        empty_tn_cells = 0
        empty_tn_fios = []
        for row in sheet.iter_rows(min_row=2, max_row=sheet.max_row, values_only=True):
            if row[tn_column_index - 1] in exclude_list:
                rows_to_delete.append(row[0])
            if (row[tn_column_index - 1] is None or row[tn_column_index - 1] == '') and \
               (row[fio_column_index - 1] is not None and row[fio_column_index - 1] != ''):
                empty_tn_cells += 1
                empty_tn_fios.append(row[fio_column_index - 1])

        # Удаление строк с табельными номерами из exclude_list
        for row in reversed(list(sheet.iter_rows(min_row=2, max_row=sheet.max_row))):
            if row[tn_column_index - 1].value in exclude_list:
                sheet.delete_rows(row[0].row, 1)

        # Создание нового листа для фамилий с пустыми табельными номерами
        empty_tn_sheet = wb.create_sheet(title="Пустые табельные номера")
        empty_tn_sheet.append(["ФИО"])
        for fio in empty_tn_fios:
            empty_tn_sheet.append([fio])

        # Обновление прогресс-бара
        update_progress_bar()

        # Алерт о сохранении списка в исключении резидентов по допуску в кампус
        messagebox.showinfo("Сохранение", "Сейчас сохраняем список в исключении резидентов по допуску в кампус.")

        # Сохранение обработанных данных обратно в Excel файл
        save_path = filedialog.asksaveasfilename(defaultextension=".xlsx", filetypes=[("Excel files", "*.xlsx")])
        if save_path:
            wb.save(save_path)
            messagebox.showinfo("Успех", f"Файл успешно обработан и сохранен.\nКоличество совпадений: {len(rows_to_delete)}\nСписок гостей без пропуска: {empty_tn_cells}")

        # Алерт о сохранении файла с фамилиями, у которых нет пропуска
        messagebox.showinfo("Сохранение", "Теперь мы сохраним тех людей, у которых нет пропуска.")

        # Сохранение отдельного файла с фамилиями с пустыми табельными номерами
        save_empty_tn_path = filedialog.asksaveasfilename(defaultextension=".xlsx", filetypes=[("Excel files", "*.xlsx")])
        if save_empty_tn_path:
            empty_tn_wb = openpyxl.Workbook()
            empty_tn_ws = empty_tn_wb.active
            empty_tn_ws.title = "Пустые табельные номера"
            empty_tn_ws.append(["ФИО"])
            for fio in empty_tn_fios:
                empty_tn_ws.append([fio])
            empty_tn_wb.save(save_empty_tn_path)
            messagebox.showinfo("Успех", "Файл с фамилиями с пустыми табельными номерами успешно сохранен.")
    except Exception as e:
        messagebox.showerror("Ошибка", f"Произошла ошибка: {e}")

def update_progress_bar():
    for i in range(101):
        progress['value'] = i
        root.update_idletasks()
        time.sleep(0.02)  # 0.02 seconds * 100 = 2 seconds

# Создание главного окна
root = tk.Tk()
root.title("Обработка списка резидентов")
root.geometry("600x600")
root.resizable(False, False)

# Преобразование PNG в ICO
icon_image = Image.open("icon.png")  # Убедитесь, что файл icon.png находится в той же директории
icon_image.save("icon.ico")

# Установка иконки окна
root.iconbitmap("icon.ico")

# Загрузка и установка фонового изображения
image = Image.open("background.jpg")  # Убедитесь, что файл background.jpg находится в той же директории
background_image = ImageTk.PhotoImage(image)
background_label = tk.Label(root, image=background_image)
background_label.place(x=0, y=0, relwidth=1, relheight=1)

# Создание кнопки для загрузки и обработки данных
load_button = tk.Button(root, text="Загрузить и обработать", command=load_and_process_data)
load_button.pack(pady=20)

# Создание прогресс-бара
progress = ttk.Progressbar(root, orient="horizontal", length=400, mode="determinate")
progress.pack(pady=20)

# Запуск главного цикла
root.mainloop()